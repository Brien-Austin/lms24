datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

model Course {
  id String @id  @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float? 
  isPublished Boolean @default(false)
  categoryID String?
  category Category? @relation(fields: [categoryID],references: [id])
  chapters Chapter[]
  purchases Purchase[]
  attachments Attachment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryID])
  @@fulltext([title])
}

model Category{
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text
  courseID String

  course Course @relation(fields: [courseID],references: [id] ,onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseID])


}


model Chapter {
  id String @id @default(uuid())
  title String
  description String?
  videoUrl String?
  youtubeUrl String?
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseID String
  course Course @relation(fields: [courseID], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseID])
}

model MuxData {
  id String @id @default(uuid())
  assetID String
  playbackID String?
  chapterID String @unique
  chatpter Chapter @relation(fields: [chapterID], references: [id] , onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userID  String

  chapterID String
  chapter Chapter @relation(fields: [chapterID], references: [id] , onDelete: Cascade)
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterID])
  @@unique([userID,chapterID])
  
}

model Purchase {
  id String @id @default(uuid())
  userID String 

  courseID String
  course Course @relation( fields: [courseID],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseID])
  @@unique([userID,courseID])
}

model StripeCustomer {
  id String @id @default(uuid())
  userID String @unique
  stripeCustomerID String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}